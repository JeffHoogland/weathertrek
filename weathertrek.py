import sys
import os
import platform
import datetime
import cPickle as pickle

#Google Maps module
# https://github.com/swistakm/python-gmaps
import gmaps
from gmaps import Directions
from gmaps import Geocoding

#Weather module
# https://code.google.com/p/python-weather-api/
import pywapi

from PySide.QtGui import *
from PySide.QtCore import *

from ui_weathertrek import Ui_MainWindow

class MainWindow(QMainWindow, Ui_MainWindow):
    def __init__(self, parent=None):
        super(MainWindow, self).__init__(parent)
        self.setupUi(self)
        
        #holds directions generated by gmaps.Directions
        self.directions = None
        
        #holds the lat, lng of all the end points in our directions
        self.positions = []

        #holds the zipcodes of all the end points in our directions
        self.zipcodes = []
        
        #holds weather reports generated by pywapi
        self.full_weather_y = []
        self.full_weather_wc = []
        
        #holds label objects with weather reports
        self.dataLabels = { "today":[],
                            "tomorrow":[],
                            "two":[],
                            "three":[],
                            "four":[]}
        
        self.assignWidgets()
    
    def workingMessage( self ):
        self.statusbar.showMessage("Working...")
    
    def getWeather( self ):
        startLocation = self.startText.text()
        endLocation = self.endText.text()
        
        if startLocation and endLocation:
            self.directions = Directions().directions(startLocation, endLocation)
            self.directions = self.directions[0]
            
            self.positions = []
            self.zipcodes = []
            
            #Snag lat, lng of points into an easy to access list
            for i in range(len(self.directions["legs"][0]["steps"])):
                self.positions.append(self.directions["legs"][0]["steps"][i]["end_location"])
            
            #Get zip codes of all of these points
            for pos in self.positions:
                results = Geocoding(sensor=False).reverse(lat=pos["lat"], lon=pos["lng"])
                for i in range(len(results[0]['address_components'])):
                    if results[0]['address_components'][i]["types"][0] == "postal_code":
                        if results[0]['address_components'][i]["short_name"] not in self.zipcodes:
                            self.zipcodes.append(results[0]['address_components'][i]["short_name"])
            
            self.statusbar.showMessage("Getting weather...")
            for zippy in self.zipcodes:
                self.full_weather_y.append(pywapi.get_weather_from_yahoo(zippy))
            
            self.todayDate.setText('<p align=\"center\"><strong>%s, %s</strong></p>'%(self.full_weather_y[0]["forecasts"][0]["day"], self.full_weather_y[0]["forecasts"][0]["date"]))
            self.tomorrowDate.setText('<p align=\"center\"><strong>%s, %s</strong></p>'%(self.full_weather_y[0]["forecasts"][1]["day"], self.full_weather_y[0]["forecasts"][1]["date"]))
            self.twoDate.setText('<p align=\"center\"><strong>%s, %s</strong></p>'%(self.full_weather_y[0]["forecasts"][2]["day"], self.full_weather_y[0]["forecasts"][2]["date"]))
            self.threeDate.setText('<p align=\"center\"><strong>%s, %s</strong></p>'%(self.full_weather_y[0]["forecasts"][3]["day"], self.full_weather_y[0]["forecasts"][3]["date"]))
            self.fourDate.setText('<p align=\"center\"><strong>%s, %s</strong></p>'%(self.full_weather_y[0]["forecasts"][4]["day"], self.full_weather_y[0]["forecasts"][4]["date"]))
            
            curLbl = 0
            
            for cast in self.full_weather_y:
                if "location" in cast:
                    self.dataLabels["today"].append(QLabel(self.todayScrollArea))
                    self.dataLabels["today"][curLbl].setText("<p><span style=\" font-weight:600;\">Location:</span> %s %s</p><p><span style=\" font-weight:600;\">Forecast:</span> %s</p><br>"%(cast["title"], self.zipcodes[curLbl], cast["forecasts"][0]["text"]))
                    self.todayLayout.addWidget(self.dataLabels["today"][curLbl])
                    
                    self.dataLabels["tomorrow"].append(QLabel(self.tomorrowScrollArea))
                    self.dataLabels["tomorrow"][curLbl].setText("<p><span style=\" font-weight:600;\">Location:</span> %s %s</p><p><span style=\" font-weight:600;\">Forecast:</span> %s</p><br>"%(cast["title"], self.zipcodes[curLbl], cast["forecasts"][1]["text"]))
                    self.tomorrowLayout.addWidget(self.dataLabels["tomorrow"][curLbl])
                    
                    self.dataLabels["two"].append(QLabel(self.twoScrollArea))
                    self.dataLabels["two"][curLbl].setText("<p><span style=\" font-weight:600;\">Location:</span> %s %s</p><p><span style=\" font-weight:600;\">Forecast:</span> %s</p><br>"%(cast["title"], self.zipcodes[curLbl], cast["forecasts"][2]["text"]))
                    self.twoLayout.addWidget(self.dataLabels["two"][curLbl])
                    
                    self.dataLabels["three"].append(QLabel(self.threeScrollArea))
                    self.dataLabels["three"][curLbl].setText("<p><span style=\" font-weight:600;\">Location:</span> %s %s</p><p><span style=\" font-weight:600;\">Forecast:</span> %s</p><br>"%(cast["title"], self.zipcodes[curLbl], cast["forecasts"][3]["text"]))
                    self.threeLayout.addWidget(self.dataLabels["three"][curLbl])
                    
                    self.dataLabels["four"].append(QLabel(self.fourScrollArea))
                    self.dataLabels["four"][curLbl].setText("<p><span style=\" font-weight:600;\">Location:</span> %s %s</p><p><span style=\" font-weight:600;\">Forecast:</span> %s</p><br>"%(cast["title"], self.zipcodes[curLbl], cast["forecasts"][4]["text"]))
                    self.fourLayout.addWidget(self.dataLabels["four"][curLbl])
                else:
                    for x in self.dataLabels:
                        self.dataLabels[x].append(None)
                
                curLbl += 1
            
            self.statusbar.showMessage("Done.")
            
        else:
            self.statusbar.showMessage("Please enter start and end locations.")
            self.messageBox("Please enter start and end locations.")
    
    def messageBox( self, ourMessage, ourTitle="Trek Message" ):
		msgBox = QMessageBox()
                msgBox.setWindowTitle(ourTitle)
		msgBox.setText(ourMessage)
		msgBox.exec_()
    
    def assignWidgets( self ):
        self.startButton.clicked.connect(self.workingMessage)
        self.startButton.clicked.connect(self.getWeather)

#Custom object to allow sorting by number and alpha
class TreeWidgetItem( QTreeWidgetItem ):
    def __init__(self, parent=None):
        QTreeWidgetItem.__init__(self, parent)

    def __lt__(self, otherItem):
        column = self.treeWidget().sortColumn()
        try:
            return float( self.text(column) ) > float( otherItem.text(column) )
        except ValueError:
            return self.text(column) > otherItem.text(column)

if __name__ == '__main__':
    app = QApplication(sys.argv)
    mainWin = MainWindow()
    mainWin.show()
    ret = app.exec_()
